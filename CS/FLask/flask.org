#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t c:nil
#+OPTIONS: creator:nil d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t
#+TITLES: Flask
#+DATE: <2017-11-15 Wed>
#+AUTHORS: weiwu
#+EMAIL: victor.wuv@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 8.3.4)
#+SETUPFILE: ../configOrg/level1.org


* Quick start
** hello world:
#+BEGIN_SRC python
from flask import Flask

app = Flask(__name__)


@app.route('/')
def hello():
    return 'Hello, World!'

#+END_SRC

#+BEGIN_SRC bash
$ export FLASK_APP=hello.py
$ flask run -h 0.0.0.0 -p 5277

#+END_SRC
** simple input&output:
#+BEGIN_SRC python
#!/usr/bin/env python3
# coding: utf-8
# File: chatbot_graph.py
# Date: 18-10-4
from gevent import pywsgi, monkey
monkey.patch_all()
from flask import Flask, request
import json
import traceback

class ChatBotGraph:
    pass


handler = ChatBotGraph()
app = Flask(__name__)
@app.route('/', methods=['GET', 'POST'])
def home():
    return '<p><a href="./chatbot">疾病风险预测引擎</a></p>'


@app.route('/chatbot', methods=['GET'])
def signin_form():
    return '''<body><form action="/chatbot" method="post">
                <!-- <p><input name="input" placeholder="input" size="180"></p> -->
                <textarea name="input" placeholder="input" clos=",50" cols="180" rows="20" warp="virtual"></textarea>

                <p><button type="submit">OK</button></p>
            </form>
            </body>'''


@app.route('/chatbot', methods=['POST'])
def signin():
    input_txt = request.form['input']
    # handler = ChatBotGraph()
    try:
        debug(input_txt)
        answer = handler.chat_main(input_txt)
    except:
        answer = '抱歉没找到相关信息，请返回重新输入。'
        debug(traceback.format_exc())
    return answer



if __name__ == '__main__':
    host, port = '0.0.0.0', 5277
    s = "* Running on http://{}:{}/".format(host, port)
    pywsgi.WSGIServer((host, port), app).serve_forever()
#+END_SRC

- requests.method:

#+BEGIN_SRC python
if request.method == "POST":
    # HTTP Method POST. That means the form was submitted by a user
    # and we can find her filled out answers using the request.POST QueryDict
else:
    # Normal GET Request (most likely).
    # We should probably display the form, so it can be filled
    # out by the user and submitted. 
#+END_SRC