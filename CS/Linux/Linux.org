#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline author:t c:nil
#+OPTIONS: creator:nil d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t
#+TITLES: Linux
#+DATE: <2017-06-08 Thu>
#+AUTHORS: weiwu
#+EMAIL: victor.wuv@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 8.3.4)
#+SETUPFILE: ../../configOrg/level2.org

*content table source: UNIX AND LINUX SYSTEM*

* BASIC ADMINISTRATION
** WHERE TO START
*** Essential duties of the system administrator
- terminate ssh connection
=C-d=

- edit&run python code at shell
#+BEGIN_SRC bash
python -c "import spacy; spacy.load('en'); print('OK')"
#+END_SRC
- restart system
#+BEGIN_SRC bash
shutdown -r +5 "Server will restart in 5 minutes. Please save your work."
#+END_SRC
- ssh server
sudo service ssh start
unrecognized service when starting ssh

#+BEGIN_SRC bash
sudo apt-get install openssh-server
#+END_SRC
- install svn
#+BEGIN_SRC bash
sudo apt-get install subversion
svn checkout http://192.168.1.30/svn/gftchina/Hanadev/trunk/WaveFront/
#+END_SRC
*** Suggested background
*** Friction between UNIX and Linux
*** Linux distributions

- centos version:
#+BEGIN_SRC bash
cat /etc/redhat-release
uname -m && cat /etc/*release
lsb_release -a
#+END_SRC

*** Example systems used in this book
*** System-specific administration tools
*** Notation and typographical conventions
*** Units
*** Man pages and other on-line documentation
*** Other authoritative documentation
*** Other sources of information
*** Ways to find and install software
*** System administration under duress
*** Configuring a deep learning machine after installing
**** install cuda & cudnn on cent os
1. yum remove "*nvidia*"
sh cuda_9.0.176_384.81_linux.run
2. nvcc--version
3. yum install ./libcudnn7-7.6.3.30-1.cuda9.0.x86_64.rpm
4. rpm -ivh libcudnn7-*.x86_64.rpm
5. rpm -ivh libcudnn7-devel-*.x86_64.rpm
6. rpm -ivh libcudnn7-doc-*.x86_64.rpm
7. cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2
8. tar -xzvf cudnn-9.0-linux-x64-v7.1.tgz
9. cp cuda/include/cudnn.h /usr/local/cuda/include
10. cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
11. chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*

**** use conda
1. remove cuda
2. downgrade nvidia to 384.69
3. conda create -n tfgpu python=3.6.8 # conda create -n example --clone base # conda create -n example --offline
4. conda activate tfgpu
5. conda install cuda=9.0
6. conda install tensorflow-gpu ipython pytorch
**** a new operation system:
*very important:*
Can't use the recommended graphical driver from the system.
1. change software update sauce to Chinese local sauce.
#+BEGIN_SRC bash
sudo apt-get update
# sudo apt-get upgrade
#+END_SRC
2. install required libraries
create example.list:
#+BEGIN_SRC bash
touch example.list
#+END_SRC

#+BEGIN_SRC txt
g++ freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libglu1-mesa libglu1-mesa-dev
build-essential cmake git unzip pkg-config python-pip openssh-server
libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev
libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
libxvidcore-dev libx264-dev
libgtk-3-dev
libhdf5-serial-dev graphviz
libopenblas-dev libatlas-base-dev gfortran
python2.7-dev pythoexport PATH=/usr/local/cuda/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATHn3-dev
linux-image-generic linux-image-extra-virtual
linux-source linux-headers-generic
libglu1-mesa libxi-dev libxmu-dev libglu1-mesa-dev
freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx   (setenv "WORKON_HOME" "~/anaconda3/envs")
libglu1-mesa libglu1-mesa-dev libglfw3-dev libgles2-mesa-dev
#+END_SRC
run this line to install above libraries:
#+BEGIN_SRC bash
cat example.list | xargs sudo apt-get -y install

#+END_SRC

3. additional software:
#+BEGIN_SRC bash
# sudo apt-get install python-tk python3-tk python-imaging-tk
sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
sudo apt-get install dkms build-essential linux-headers-generic
sudo apt-get install python-setuptools python-dev build-essential
sudo easy_install pip
sudo pip install --upgrade virtualenv

#+END_SRC

4. enable remote control
#+BEGIN_SRC bash
sudo apt-get install vinagre
#+END_SRC

5. install nvidia driver
check nvidia driver:
#+BEGIN_SRC bash
cat /proc/driver/nvidia/version
lspci | grep -i nvidia
lsmod | grep nvidia
#+END_SRC

- uninstall of make install:
#+BEGIN_SRC bash
make uninstall
make clean
#+END_SRC

- new on centos:
#+BEGIN_SRC bash
vi /etc/sysconfig/network-scripts/ifcfg-enp0s3
service network restart

yum install wget
wget O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo
yum clean all
yum makecache

yum install vim lrzsz bzip2 unzip tree lsof traceoute

systemctl restart network

# step 1: 安装必要的一些系统工具
sudo yum install -y yum-utils device-mapper-persistent-data lvm2
# Step 2: 添加软件源信息
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
# Step 3: 更新并安装 Docker-CE
sudo yum makecache fast
sudo yum -y install docker-ce
# Step 4: 开启Docker服务
sudo service docker start

vim /etc/clickhouse-server/config.xml

yum install zsh
sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
sudo chsh -s /bin/zsh root

curl -Lo install.sh https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
sh install.sh

wget http://opensource.wandisco.com/rhel/7/git/x86_64/git-2.22.0-1.WANdisco.437.x86_64.rpm
yum install git-2.22.0-1.WANdisco.437.x86_64.rpm -y

sudo yum install yum-utils
sudo rpm --import https://repo.clickhouse.tech/CLICKHOUSE-KEY.GPG
sudo yum-config-manager --add-repo https://repo.clickhouse.tech/rpm/stable/x86_64
sudo yum install clickhouse-server clickhouse-client

#+END_SRC
**** Setup Linux Nvidia GPU
1. check & install linux headers
#+BEGIN_SRC bash
# list linux kernal header version
ls -l /usr/src/kernels/
uname -m && cat /etc/*release
uname -r # which should equal to previous result
# centos
yum install kernel-devel-$(uname -r) kernel-headers-$(uname -r)
# ubuntu
sudo apt-get install linux-headers-$(uname -r)
#+END_SRC
2. Perform the following steps to install CUDA and verify the installation.

2.1 uninstall nvidia driver first:

To remove CUDA Toolkit:
$ sudo yum remove "*cublas*" "cuda*"
To remove NVIDIA Drivers:
$ sudo yum remove "*nvidia*"

3. download cuda
[[https://developer.nvidia.com/cuda-toolkit-archive][cuda_downloads]]

[[https://www.pyimagesearch.com/2017/09/27/setting-up-ubuntu-16-04-cuda-gpu-for-deep-learning-with-python/][tutorial of installing cuda gpu for deep learning with python]]

https://wiki.zthxxx.me/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Linux/Ubuntu/Ubuntu-16-%E5%BC%80%E6%9C%BA%E9%BB%98%E8%AE%A4%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2/

4. Disable the Nouveau drivers:
Create a file at /etc/modprobe.d/blacklist-nouveau.conf with the following contents:
#+BEGIN_SRC txt
blacklist nouveau
options nouveau modeset=0

#+END_SRC
5. Regenerate the kernel initramfs:
#+BEGIN_SRC bash
sudo update-initramfs -u

#+END_SRC
6. Reboot into runlevel 3 by temporarily adding the number "3" and the word "nomodeset" to the end of the system's kernel boot parameters.
#+BEGIN_SRC bash
sudo systemctl isolate multi-user.target
sudo systemctl enable multi-user.target
sudo systemctl set-default multi-user.target
sudo reboot
#+END_SRC
7. install nvidia graph card driver first.
cuda 9 need nvidia driver above 384.00.
8. Run the installer to install with the default selections (implies acceptance of the EULA):
#+BEGIN_SRC bash
sudo init 3
# carefully choosing options when you have multiple cards installed.
sudo sh cuda_9.1.85_387.26_lifind . -type f -newermt 20190826 \! -newermt 20190906nux.run

#+END_SRC

#+BEGIN_SRC txt
***WARNING: Incomplete installation! This installation did not install the CUDA Driver.
A driver of version at least 384.00 is required for CUDA 9.1 functionality to work.
#+END_SRC
9. Create an xorg.conf file to use the NVIDIA GPU for display:
#+BEGIN_SRC bash
sudo nvidia-xconfig
#+END_SRC
10. Reboot the system to load the graphical interface.
Set up the development environment by modifying the PATH and LD_LIBRARY_PATH variables:
#+BEGIN_SRC bash
# Please make sure that
# -   PATH includes /usr/local/cuda-9.1/bin
# -   LD_LIBRARY_PATH includes /usr/local/cuda-9.1/lib64, or,
# add /usr/local/cuda-9.1/lib64 to /etc/ld.so.conf and run ldconfig as root
export PATH=/usr/local/cuda-9.1/bin${PATH:+:${PATH}}
export LD_LIBRARY_PATH=/usr/local/cuda-9.1/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
LD_LIBRARY_PATH="/usr/local/cuda/lib64"; export LD_LIBRARY_PATH
PATH="$PATH:/usr/local/cuda/bin";export PATH
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64
source ~/.bashrc
exec "$SHELL"
#+END_SRC
- Install a writable copy of the samples then build and run the nbody sample:
#+BEGIN_SRC bash
cuda-install-samples-9.1.sh ~
cd ~/NVIDIA_CUDA-9.1_Samples/5_Simulations/nbody
GLPATH=/usr/lib make
./nbody
#+END_SRC
11. *in case* you need to kill x service manually:
# ps ax | grep X
# sudo kill -9 PID
# set graphical as default
sudo systemctl isolate graphical.target
sudo systemctl enable graphical.target
sudo systemctl set-default graphical.target
sudo reboot
12. remove nvidia
#+BEGIN_SRC bash
To uninstall the CUDA Toolkit, run the uninstall script in /usr/local/cuda-9.1/bin
To uninstall the NVIDIA Driver, run nvidia-uninstall

Please see CUDA_Installation_Guide_Linux.pdf in /usr/local/cuda-9.1/doc/pdf for detailed information on setting up CUDA.
sudo /usr/local/cuda-X.Y/bin/uninstall_cuda_X.Y.pl
sudo apt-get remove --purge nvidia*
sudo apt-get update
sudo apt-get install dkms build-essential linux-headers-generic
#+END_SRC

13. cuda version
#+BEGIN_SRC bash
nvcc --version
#+END_SRC

14. cudnn version
#+BEGIN_SRC bash
cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2
#+END_SRC
***** install cudnn:
1. mount share folder:
#+BEGIN_SRC bash
sudo mount -t cifs -o username="gft" //192.168.1.126/share ~/Downloads/share
#+END_SRC
2. unzip the cuDNN package
#+BEGIN_SRC bash
tar -xzvf cudnn-9.1-linux-x64-v7.tgz
#+END_SRC
3. Copy the following files into the CUDA Toolkit directory.
#+BEGIN_SRC bash
sudo cp cuda/include/cudnn.h /usr/local/cuda/include
sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*
#+END_SRC
4. install CUDA Toolkit
#+BEGIN_SRC bash
# best way
sudo apt install nvidia-cuda-toolkit
# or
wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_9.1.85-1_amd64.deb
sudo dpkg -i cuda-repo-ubuntu1604_9.1.85-1_amd64.deb
sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
sudo apt-get update
sudo apt-get install cuda
#+END_SRC
5. check nvidia driver installation
#+BEGIN_SRC bash
nvidia-smi
#+END_SRC
#+RESULTS:
: Fri Dec 15 14:07:04 2017
: +-----------------------------------------------------------------------------+
: | NVIDIA-SMI 387.26                 Driver Version: 387.26                    |
: |-------------------------------+----------------------+----------------------+
: | GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
: | Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
: |===============================+======================+======================|
: |   0  GeForce GTX 108...  Off  | 00000000:03:00.0 Off |                  N/A |
: | 21%   26C    P0    52W / 250W |      0MiB / 11172MiB |      0%      Default |
: +-------------------------------+----------------------+----------------------+
: |   1  GeForce GTX 108...  Off  | 00000000:04:00.0 Off |                  N/A |
: | 21%   30C    P0    54W / 250W |      0MiB / 11170MiB |      3%      Default |
: +-------------------------------+----------------------+----------------------+
:
: +-----------------------------------------------------------------------------+
: | Processes:                                                       GPU Memory |
: |  GPU       PID   Type   Process name                             Usage      |
: |=============================================================================|
: |  No running processes found                                                 |
: +-----------------------------------------------------------------------------+
6. install cuDNN source code:
#+BEGIN_SRC bash
oem@dl ~/Downloads $ sudo dpkg -i libcudnn7_7.0.5.15-1+cuda9.1_amd64.deb
#+END_SRC
: Selecting previously unselected package libcudnn7.
: (Reading database ... 265428 files and directories currently installed.)
: Preparing to unpack libcudnn7_7.0.5.15-1+cuda9.1_amd64.deb ...
: Unpacking libcudnn7 (7.0.5.15-1+cuda9.1) ...
: Setting up libcudnn7 (7.0.5.15-1+cuda9.1) ...
: Processing triggers for libc-bin (2.23-0ubuntu3) ...
: oem@dl ~/Downloads $ sudo dpkg -i libcudnn7-dev_7.0.5.15-1+cuda9.1_amd64.deb
: Selecting previously unselected package libcudnn7-dev.
: (Reading database ... 265435 files and directories currently installed.)
: Preparing to unpack libcudnn7-dev_7.0.5.15-1+cuda9.1_amd64.deb ...
: Unpacking libcudnn7-dev (7.0.5.15-1+cuda9.1) ...
: Setting up libcudnn7-dev (7.0.5.15-1+cuda9.1) ...
: update-alternatives: using /usr/include/x86_64-linux-gnu/cudnn_v7.h to provide /usr/include/cudnn.h (libcudnn) in auto mode
: oem@dl ~/Downloads $ sudo dpkg -i libcudnn7-doc_7.0.5.15-1+cuda9.1_amd64.deb
: (Reading database ... 265441 files and directories currently installed.)
: Preparing to unpack libcudnn7-doc_7.0.5.15-1+cuda9.1_amd64.deb ...
: Unpacking libcudnn7-doc (7.0.5.15-1+cuda9.1) over (7.0.5.15-1+cuda9.1) ...
: Setting up libcudnn7-doc (7.0.5.15-1+cuda9.1) ...
: oem@dl ~/Downloads $ ls
: cuda                          install.sh                                  libcudnn7-doc_7.0.5.15-1+cuda9.1_amd64.deb
: cuda_9.1.85_387.26_linux.run  libcudnn7_7.0.5.15-1+cuda9.1_amd64.deb      NVIDIA-Linux-x86_64-384.98.run
: cudnn-9.1-linux-x64-v7.tgz    libcudnn7-dev_7.0.5.15-1+cuda9.1_amd64.deb  share
: oem@dl ~/Downloads $ cp -r /usr/src/cudnn_samples_v7/ /home/oem/projects/
: oem@dl ~/Downloads $ cd ../projects/
: oem@dl ~/projects $ ls
: cudnn_samples_v7
: oem@dl ~/projects $ cd cudnn_samples_v7/
: oem@dl ~/projects/cudnn_samples_v7 $ ls
: conv_sample  mnistCUDNN  RNN
: oem@dl ~/projects/cudnn_samples_v7 $ cd mnistCUDNN/
: oem@dl ~/projects/cudnn_samples_v7/mnistCUDNN $ make clean &&make
: rm -rf *o
: rm -rf mnistCUDNN
: /usr/local/cuda/bin/nvcc -ccbin g++ -I/usr/local/cuda/include -IFreeImage/include  -m64    -gencode arch=compute_30,code=sm_30 -gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_53,code=sm_53 -gencode arch=compute_53,code=compute_53 -o fp16_dev.o -c fp16_dev.cu
: g++ -I/usr/local/cuda/include -IFreeImage/include   -o fp16_emu.o -c fp16_emu.cpp
: g++ -I/usr/local/cuda/include -IFreeImage/include   -o mnistCUDNN.o -c mnistCUDNN.cpp
: /usr/local/cuda/bin/nvcc -ccbin g++   -m64      -gencode arch=compute_30,code=sm_30 -gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_53,code=sm_53 -gencode arch=compute_53,code=compute_53 -o mnistCUDNN fp16_dev.o fp16_emu.o mnistCUDNN.o  -LFreeImage/lib/linux/x86_64 -LFreeImage/lib/linux -lcudart -lcublas -lcudnn -lfreeimage -lstdc++ -lm
: oem@dl ~/projects/cudnn_samples_v7/mnistCUDNN $ ls
: data          fp16_dev.cu  fp16_dev.o    fp16_emu.h  FreeImage  Makefile    mnistCUDNN.cpp  readme.txt
: error_util.h  fp16_dev.h   fp16_emu.cpp  fp16_emu.o  gemv.h     mnistCUDNN  mnistCUDNN.o
: oem@dl ~/projects/cudnn_samples_v7/mnistCUDNN $ ./mnistCUDNN
: ./mnistCUDNN: error while loading shared libraries: libcudart.so.9.1: cannot open shared object file: No such file or directory
: oem@dl ~/projects/cudnn_samples_v7/mnistCUDNN $ ls /usr/local/cuda/lib64 | grep libcudart
: libcudart.so
: libcudart.so.9.1
: libcudart.so.9.1.85
: libcudart_static.a
: oem@dl ~/projects/cudnn_samples_v7/mnistCUDNN $ PATH="$PATH:/usr/local/cuda/bin";export PATH
: oem@dl ~/projects/cudnn_samples_v7/mnistCUDNN $ LD_LIBRARY_PATH="/usr/local/cuda/lib64"; export LD_LIBRARY_PATH
: oem@dl ~/projects/cudnn_samples_v7/mnistCUDNN $ exec "$SHELL"
: oem@dl ~/projects/cudnn_samples_v7/mnistCUDNN $ LD_LIBRARY_PATH="/usr/local/cuda/lib64"
: oem@dl ~/projects/cudnn_samples_v7/mnistCUDNN $ echo $LD_LIBRARY_PATH
: /usr/local/cuda/lib64
: oem@dl ~/projects/cudnn_samples_v7/mnistCUDNN $ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64
: oem@dl ~/projects/cudnn_samples_v7/mnistCUDNN $ ./mnistCUDNN
: cudnnGetVersion() : 7005 , CUDNN_VERSION from cudnn.h : 7005 (7.0.5)
: Host compiler version : GCC 5.4.0
: There are 2 CUDA capable devices on your machine :
: device 0 : sms 28  Capabilities 6.1, SmClock 1582.0 Mhz, MemSize (Mb) 11172, MemClock 5505.0 Mhz, Ecc=0, boardGroupID=0
: device 1 : sms 28  Capabilities 6.1, SmClock 1582.0 Mhz, MemSize (Mb) 11169, MemClock 5505.0 Mhz, Ecc=0, boardGroupID=1
: Using device 0
:
: Testing single precision
: Loading image data/one_28x28.pgm
: Performing forward propagation ...
: Testing cudnnGetConvolutionForwardAlgorithm ...
: Fastest algorithm is Algo 1
: Testing cudnnFindConvolutionForwardAlgorithm ...
: ^^^^ CUDNN_STATUS_SUCCESS for Algo 0: 0.031744 time requiring 0 memory
: ^^^^ CUDNN_STATUS_SUCCESS for Algo 1: 0.038912 time requiring 3464 memory
: ^^^^ CUDNN_STATUS_SUCCESS for Algo 2: 0.056320 time requiring 57600 memory
: ^^^^ CUDNN_STATUS_SUCCESS for Algo 7: 0.083968 time requiring 2057744 memory
: ^^^^ CUDNN_STATUS_SUCCESS for Algo 5: 0.108416 time requiring 203008 memory
: Resulting weights from Softmax:
: 0.0000000 0.9999399 0.0000000 0.0000000 0.0000561 0.0000000 0.0000012 0.0000017 0.0000010 0.0000000
: Loading image data/three_28x28.pgm
: Performing forward propagation ...
: Resulting weights from Softmax:
: 0.0000000 0.0000000 0.0000000 0.9999288 0.0000000 0.0000711 0.0000000 0.0000000 0.0000000 0.0000000
: Loading image data/five_28x28.pgm
: Performing forward propagation ...
: Resulting weights from Softmax:
: 0.0000000 0.0000008 0.0000000 0.0000002 0.0000000 0.9999820 0.0000154 0.0000000 0.0000012 0.0000006
:
: Result of classification: 1 3 5
:
: Test passed!
:
: Testing half precision (math in single precision)
: Loading image data/one_28x28.pgm
: Performing forward propagation ...
: Testing cudnnGetConvolutionForwardAlgorithm ...
: Fastest algorithm is Algo 1
: Testing cudnnFindConvolutionForwardAlgorithm ...
: ^^^^ CUDNN_STATUS_SUCCESS for Algo 0: 0.028512 time requiring 0 memory
: ^^^^ CUDNN_STATUS_SUCCESS for Algo 1: 0.031744 time requiring 3464 memory
: ^^^^ CUDNN_STATUS_SUCCESS for Algo 2: 0.052224 time requiring 28800 memory
: ^^^^ CUDNN_STATUS_SUCCESS for Algo 7: 0.074752 time requiring 2057744 memory
: ^^^^ CUDNN_STATUS_SUCCESS for Algo 5: 0.106496 time requiring 203008 memory
: Resulting weights from Softmax:
: 0.0000001 1.0000000 0.0000001 0.0000000 0.0000563 0.0000001 0.0000012 0.0000017 0.0000010 0.0000001
: Loading image data/three_28x28.pgm
: Performing forward propagation ...
: Resulting weights from Softmax:
: 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000714 0.0000000 0.0000000 0.0000000 0.0000000
: Loading image data/five_28x28.pgm
: Performing forward propagation ...
: Resulting weights from Softmax:
: 0.0000000 0.0000008 0.0000000 0.0000002 0.0000000 1.0000000 0.0000154 0.0000000 0.0000012 0.0000006
:
: Result of classification: 1 3 5
:
: Test passed!

7. install tensorflow with GPU support
#+BEGIN_SRC bash
sudo apt-get install libcupti-dev
#+END_SRC
tensorflow-gpu is not supported installed from pip, you should try building wheel from the source code from [[https://pypi.python.org/pypi/tensorflow-gpu]].
https://github.com/mind/wheels/releases/tag/tf1.4.1-gpu-cuda91

These wheels contain MKL support. If you don't have it, install MKL by following the instructions here.
#+BEGIN_SRC bash
pip --no-cache-dir install https://github.com/mind/wheels/releases/download/tf1.4.1-gpu-cuda91/tensorflow-1.4.1-cp27-cp27mu-linux_x86_64.whl --upgrade
Collecting tensorflow==1.4.1 from https://github.com/mind/wheels/releases/download/tf1.4.1-gpu-cuda91/tensorflow-1.4.1-cp27-cp27mu-linux_x86_64.whl
pip install --upgrade https://pypi.python.org/packages/55/68/d99d2a93e5ea22eb410e5e173d014d926ce30aa10a3d2ed7e9033deeb563/tensorflow_gpu-1.4.1-cp35-cp35m-manylinux1_x86_64.whl#md5=1cda67643cfca3feef0fea9968864bf3
#+END_SRC
- verifying tensorflow-gpu library:
#+BEGIN_SRC bash
python -m tensorflow.models.image.mnist.convolutional
#+END_SRC
or
#+BEGIN_SRC bash
git clone https://github.com/tensorflow/models.git
workon dl4_w2v_p3
python models/tutorials/image/mnist/convolutional.py
#+END_SRC
#+RESULT:
: Successfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.
: Successfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.
: Successfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.
: Successfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.
: Extracting data/train-images-idx3-ubyte.gz
: Extracting data/train-labels-idx1-ubyte.gz
: Extracting data/t10k-images-idx3-ubyte.gz
: Extracting data/t10k-labels-idx1-ubyte.gz
: 2017-12-27 09:49:37.782681: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1030] Found device 0 with properties:
: name: GeForce GTX 1080 Ti major: 6 minor: 1 memoryClockRate(GHz): 1.582
: pciBusID: 0000:03:00.0
: totalMemory: 10.91GiB freeMemory: 10.75GiB
: 2017-12-27 09:49:38.016990: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1030] Found device 1 with properties:
: name: GeForce GTX 1080 Ti major: 6 minor: 1 memoryClockRate(GHz): 1.582
: pciBusID: 0000:04:00.0
: totalMemory: 10.91GiB freeMemory: 10.65GiB
: 2017-12-27 09:49:38.017581: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1045] Device peer to peer matrix
: 2017-12-27 09:49:38.017607: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1051] DMA: 0 1
: 2017-12-27 09:49:38.017613: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1061] 0:   Y Y
: 2017-12-27 09:49:38.017617: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1061] 1:   Y Y
: 2017-12-27 09:49:38.017629: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:0) -> (device: 0, name: GeForce GTX 1080 Ti, pci bus id: 0000:03:00.0, compute capability: 6.1)
: 2017-12-27 09:49:38.017650: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:1) -> (device: 1, name: GeForce GTX 1080 Ti, pci bus id: 0000:04:00.0, compute capability: 6.1)
: Initialized!
: Step 0 (epoch 0.00), 26.8 ms
: Minibatch loss: 8.334, learning rate: 0.010000
: Minibatch error: 85.9%
: Validation error: 84.6%
: Step 100 (epoch 0.12), 4.6 ms
: Minibatch loss: 3.241, learning rate: 0.010000
: Minibatch error: 7.8%
: Validation error: 7.7%
: Step 200 (epoch 0.23), 4.1 ms
: Minibatch loss: 3.351, learning rate: 0.010000
- tensorflow cpu only:
#+RESULTS:
: I tensorflow/models/embedding/word2vec_kernels.cc:200] Data file: data/text8 contains 100000000 bytes, 17005207 words, 253854 unique words, 71290 unique frequent words.
: Data file:  data/text8
: Vocab size:  71290  + UNK
: Words per epoch:  17005207
: mu_scale = 0.2449489742783178 var_scale = 0.05
**** make nvida docker runnning tensorflow gpu
#+BEGIN_SRC bash
sudo apt-get install -y nvidia-docker2=2.0.2+docker1.13.1 nvidia-container-runtime=1.1.1+docker1.13.1
#+END_SRC

** SCRIPTING AND THE SHELL
*** Shell basics
- script:
#+BEGIN_SRC bash
TEST_IMG=ADE_val_00001514.jpg
MODEL_PATH=baseline-resnet50_dilated8-ppm_bilinear_deepsup
RESULT_PATH=./

ENCODER=$MODEL_PATH/encoder_epoch_20.pth
DECODER=$MODEL_PATH/decoder_epoch_20.pth
CONTENT=images/content
STYLE=images/style

if [ ! -e $ENCODER ]; then
  mkdir $MODEL_PATH
fi
if [ ! -e $ENCODER ]; then
  wget -P $MODEL_PATH http://sceneparsing.csail.mit.edu/model/pytorch/$ENCODER
fi
if [ ! -e $DECODER ]; then
  wget -P $MODEL_PATH http://sceneparsing.csail.mit.edu/model/pytorch/$DECODER
fi
if [ ! -e $TEST_IMG ]; then
  wget -P $RESULT_PATH http://sceneparsing.csail.mit.edu//data/ADEChallengeData2016/images/validation/$TEST_IMG
fi

for f in $(ls $CONTENT); do
	echo $f
 python3 -u test.py \
  --model_path $MODEL_PATH \
  --test_img $CONTENT/$f \
  --arch_encoder resnet50_dilated8 \
  --arch_decoder ppm_bilinear_deepsup \
  --fc_dim 2048 \
  --result $STYLE

done
#+END_SRC
- centos PATH file
#+BEGIN_SRC txt
/bin/bash
The bash executable
/etc/profile
The systemwide initialization file, executed for login shells
~/.bash_profile
The personal initialization file, executed for login shells
~/.bashrc
The individual per-interactive-shell startup file
~/.bash_logout
The individual login shell cleanup file, executed when a login shell exits
~/.inputrc
Individual readline initialization file
#+END_SRC

#+BEGIN_SRC bash
vim /etc/profile
#+END_SRC
- evaluate shell configuration without restart shell:
#+BEGIN_SRC bash
exec $SHELL -l
source ~/.zshrc
#+END_SRC

- list all the users of a group:
#+BEGIN_SRC bash
cat /etc/group
#+END_SRC

- list all files by:
#+BEGIN_SRC bash
-r, --reverse
reverse order while sorting

-S     sort by file size

--sort=WORD
sort by WORD instead of name: none -U, extension -X, size -S, time -t, version -v

-t     sort by modification time, newest first

#+END_SRC

- split file:
#+BEGIN_SRC shell
split -d -l 10000 source.csv tempfile.part
#+END_SRC

- show running log:
#+BEGIN_SRC bash
tail -f -n 100 wiki_upload.log
tail -f -n +1 yourfile.txt | nl
#+END_SRC
- show absolute path of file:
#+BEGIN_SRC bash
realpath filename
#+END_SRC
- detect keyboard press
#+BEGIN_SRC bash
xev
#+END_SRC
- count file number under a directory
#+BEGIN_SRC bash
ls -1 | wc -l
# count all the files recursively
find DIR_NAME -type f | wc -l
#+END_SRC

- check md5
#+BEGIN_SRC bash
md5sum filename
#+END_SRC
- Make bash act as if it had been invoked as a login shell
#+BEGIN_SRC bash
exec "$SHELL"
#+END_SRC
- list all the files or folders in a directory
#+BEGIN_SRC bash
alias lf="ls -l | egrep -v '^d'"
alias ldir="ls -l | egrep '^d'"
#+END_SRC
- list all the sub-folders in a directory
#+BEGIN_SRC bash
find ./ -type d

#+END_SRC
- remove all the sub-folders in a directory
#+BEGIN_SRC bash
rm -R -- */
#+END_SRC
- tmux for multiple windows on the terminal like zsh
- convert files in batches
#+BEGIN_SRC bash
#!/bin/bash
show_file()
{
    for file in `ls $1`
    do
        if [ -d $1"/"$file ];then
            #目录递归调用show_file函数
            show_file $1"/"$file
        else
            #文件
            echo "文件繁体转简体"$1"/"$file
            opencc -i $1"/"$file -o $1"/"$file".zhs" -c zht2zhs.ini
            rm $1"/"$file
        fi
    done
}
path=./zhswiki
show_file $path
#+END_SRC
- rename all files ending with prefix.
#+BEGIN_SRC bash
# to rename all files matching "*.bak" to strip the extension
rename 's/\.bak$//' *.bak
#+END_SRC
*** bash scripting
*** Regular expressions
*** Perl programming
*** Ruby
- install ruby
https://www.ruby-lang.org/en/documentation/installation/#apt

- pdfextract:
#+BEGIN_SRC bash
sudo gem install ttfunk

# Get the cloned pdf-reader-1.3.3 (and uninstall all other versions)
git clone https://github.com/yob/pdf-reader
cd pdf-reader
gem build pdf-reader.gemspec
sudo gem install pdf-reader-1.3.3.gem # check version number

# Then get the cloned pdf-extract (not the same as zip)
git clone https://github.com/CrossRef/pdfextract
cd pdfextract
gem build pdf-extract.gemspec
sudo gem install pdf-extract-0.1.1.gem


#+END_SRC
*** Python scripting
- background command:
#+BEGIN_SRC bash
nohup python import_new_knowledge_20210302_5.py > mycommand5.out 2>&1 &
#+END_SRC

- python packages path
/home/wuwei/anaconda3/envs/tfgpu/lib/python3.6/site-packages
*** Scripting best practices

*** Shell commands:
- clear terminal output:
#+BEGIN_SRC bash
reset
#+END_SRC

- copy a filepath to clipboard
#+BEGIN_SRC bash
pwd |  xclip -i -selection clipboard
#+END_SRC

- copy folder:
#+BEGIN_SRC bash
cp folder /destination/path -a
#+END_SRC

- check operation system information:
#+BEGIN_SRC bash
uname -m && cat /etc/*release
#+END_SRC

- view a document with openoffice:
#+BEGIN_SRC bash
soffice filename
#+END_SRC

- transfer files, copy file from a remote computer to local host
#+BEGIN_SRC bash
scp usrname@ip:/home/weiwu/share/deep_learning/data/enwiki-20170820-pages-articles.xml.bz2 ./
#+END_SRC

- transfer local files to remote host
#+BEGIN_SRC bash
scp file usr_name@ip:/absolute/path/
# copy folder
scp -r ./path/from/destination username@hostname:/path/to/destination
#+END_SRC

- linux folder tree output to clipboard.
#+BEGIN_SRC txt
-P pattern
      List  only  those files that match the wild-card pattern.  Note:
      you must use the -a option to also consider those  files  begin‐
      ning  with a dot `.' for matching.  Valid wildcard operators are
      `*' (any zero or more characters), `?' (any  single  character),
      `[...]'  (any single character listed between brackets (optional
      - (dash) for character  range  may  be  used:  ex:  [A-Z]),  and
      `[^...]'  (any  single character not listed in brackets) and `|'
      separates alternate patterns.

-I pattern
      Do not list those files that match the wild-card pattern.
So, for example

tree -I 'test*|docs|bin|lib'
#+END_SRC
#+BEGIN_SRC shell
tree -P '*.org' | xclip && xclip -o > /tmp/tree.txt
tree -P '*.sh|*.py|*.csv|*.ddlog|*.url|*.conf' | xclip && xclip -o > /tmp/tree.txt
tree | xclip
xclip -o
#+END_SRC
- count csv file rows
#+BEGIN_SRC shell
wc -l filename
#+END_SRC
- count files
#+BEGIN_SRC shell
ls -l folder/path | wc -l
#+END_SRC
- resume interrupted download via wget:
#+BEGIN_SRC shell
wget -c -t 0 --timeout=10 --waitretry=10 url
# zsh: parse error near &
wget “<DOWNLOAD_URL>”
#+END_SRC
- download with axel
#+BEGIN_SRC bash
axel -n 10 url
unzip *.zip -d folder/
#+END_SRC
- show sub folder and file size
#+BEGIN_SRC bash
du -sh *
#+END_SRC

#+RESULTS:
: | 24K | Linux.org |
- show directory size
#+BEGIN_SRC bash
# du only for directories
du -sh ./*/
#+END_SRC

- show cpu information:
#+BEGIN_SRC bash
lscpu
#+END_SRC
- unzip a compressed file:
#+BEGIN_SRC shell
unzip filename.zip
# batch unzip
ls *.zip | xargs -n1 unzip -o -P infected
#+END_SRC

- unpack a tar.gz file
#+BEGIN_SRC shell
# tar.gz
tar -xvzf rebol.tar.gz
tar -xvjSf *.tar.bz2
# batch extract
ls *.tar.gz | xargs -n1 tar xzvf
简介

参数：

-c  ：建立一个压缩档案的参数指令(create 的意思)；

-x  ：解开一个压缩档案的参数指令！

-t  ：查看 tarfile 里面的档案！

特别注意，在参数的下达中， c/x/t 仅能存在一个！不可同时存在！

因为不可能同时压缩与解压缩。

-z  ：是否同时具有 gzip 的属性？亦即是否需要用 gzip 压缩？

-j  ：是否同时具有 bzip2 的属性？亦即是否需要用 bzip2 压缩？

-v  ：压缩的过程中显示档案！这个常用，但不建议用在背景执行过程！

-f  ：使用档名，请留意，在 f 之后要立即接档名喔！不要再加参数！
#*.gz

#+END_SRC

- restart network service
#+BEGIN_SRC shell
sudo service network-manager restart
#+END_SRC

- chmod:
第一列共有10个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是d，表示是一个目录。从第二个字符开始到第十个共9个字符，3个字符一组，分别表示了3组用户对文件或者目录的权限。权限字符用横线代表空许可，r代表只读，w代表写，x代表可执行。
例如：
#+begin_src emacs-lisp :tangle yes
　　- rw- r-- r--
#+end_src

　　表示log2012.log是一个普通文件；log2012.log的属主有读写权限；与log2012.log属主同组的用户只有读权限；其他用户也只有读权限。

一般程序文件为 chmod 644 *.py
add write permission for all users:
#+BEGIN_SRC bash
sudo chmod -R 0777 /folder
#+END_SRC
- create symbolic link for a directory
#+BEGIN_SRC shell
ln -s /absolute/path/of/source/folder/ /absolute/path/of/target/folder/
# create a link dogscats folder in projects/deep_learning/basic/courses/deeplearning1/nbs/data/
ln -s /home/weiwu/share/deep_learning/data/courses/dogscats/ /home/weiwu/projects/deep_learning/basic/courses/deeplearning1/nbs/data/
#+END_SRC

*** find/search string
- replace string in a file:
#+BEGIN_SRC bash
sed -i 's/old-text/new-text/g' input.txt
#+END_SRC
- find string in console:
=C-S f=
- Go to a specific line number using Less in Unix
go to line number 320123, you would type 320123g in less.
or use:
#+BEGIN_SRC bash
less +320123 filename
#+END_SRC

- less filename:
  - u - up half page
  - d - down half page
  - k - scroll single line up
  - j - scroll single line down
  - -i - case insensitive searching unless pattern contains capitals (as clo or in less)
  - =/= /pattern/ - search (used with =n= forward and =N= backward)
  - =?= – search for a pattern which will take you to the previous occurrence.
  - -p /pattern/ open file at /pattern/ (as clo)
  - & /pattern/ show lines containing /pattern/ (like grep)

- find file between a date range:
#+begin_src shell
find . -type f -newermt 20190826 \! -newermt 20190906
#+end_src

- find file by name and show file size:
#+BEGIN_SRC shell
find / -maxdepth 10 -size +100000 -exec ls -lh {} +

find ./ -name '*.pkl' -exec ls -lh {} +
#+END_SRC

- find string or regex in files
#+begin_src shell
# grep = global regular expression parser
grep -inR "Regular Expression" .
grep -inR "Regular Expression" . | less
如果有符号{},要在前面加\, \{2,5\}
# find specific formats
grep -inR "Regular Expression" . --include \*.org

# search for gid
grep '[0-9A-Z]\{32\}' wiki_upload.log > log.txt
#+end_src

- find process in the ps
#+begin_src emacs-lisp :tangle yes
ps -ef | grep mysql
#+end_src

- remove duplicated lines from a file:
#+BEGIN_SRC bash
awk '!seen[$0]++' filename
cat yourfile | sort | uniq > yourfile_nodups
#+END_SRC

- draw lines without enough fields:
#+BEGIN_SRC shell
awk -F , 'NF == 11' <input_file > output_file
#+END_SRC

- check python versions:
#+BEGIN_SRC shell
sudo find / -type f -executable -iname 'python*' -exec file -i '{}' \; | awk -F: '/x-executable; charset=binary/ {print $1}' | xargs readlink -f | sort -u | xargs -I % sh -c 'echo -n "%: "; % -V'

# 2
ls -ls /usr/bin/python*
#+END_SRC

- search all strings in a file:
#+BEGIN_SRC bash
grep "_" vocabulary > phrase_vocab
#+END_SRC

- search a folder name under a subfolder
#+BEGIN_SRC bash
find . -name "name*"
find . -path '*/folder/subfolder'
#+END_SRC

*** zsh
#+BEGIN_SRC shell
# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
  export ZSH=/home/weiwu/.oh-my-zsh

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="robbyrussell"
# ZSH_THEME="agnoster"
# ZSH_THEME="pygmalion"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"
SAVEHIST=1000000
HISTFILE=~/.zsh_history

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git jump z)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
export XMODIFIERS="@im=fcitx"
export GTK_IM_MODULE=xim
export QT_IM_MODULE=xim
export LC_CTYPE=zh_CN.UTF-8
alias lf="ll -l | egrep -v '^d'"
alias ldir="ll -l | egrep '^d'"
alias lwc="ll -1 | wc -l"
#alias got="ps awx | grep"
alias got="realpath "$1" |  xclip -i -selection clipboard"
function got()
{
    readlink -f $1 | xclip -i -selection clipboard
}
# path
export PATH=$HOME/Tools/google_appengine:$PATH
export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

# emacs
alias ec='emacsclient -nc -a ""'
export EDITOR="emacsclient"

# cpp
export CPLUS_INCLUDE_PATH=$HOME/github/rlib-cpp:$HOME/github/ib-tws-trade:$HOME/github/ib-tws-trade/PosixClient/Shared:$CPLUS_INCLUDE_PATH
export GTAGSLIBPATH=$HOME/.gtags/
export AG_STRATEGY=$HOME/projects/ag-strategy:$AG_STRATEGY

# node
alias npm='npm --registry=https://registry.npm.taobao.org'

# python
#export PYENV_ROOT="$HOME/.pyenv"

export PYTHONPATH=/usr/local/lib/python2.7/:$PYTHONPATH
# export PYTHONPATH=$HOME/projects/tradehub/src/py/:$PYTHONPATH
export PYTHONPATH=$HOME/projects/deep_learning/:$PYTHONPATH
export PYTHONPATH=$HOME/projects/simulate/:$PYTHONPATH
export PYTHONPATH=$HOME/tools/WaveFront/PythonScripts/:$PYTHONPATH
export PYTHONPATH=$HOME/projects/ylib-py/:$PYTHONPATH
export PYTHONPATH=$HOME/projects/:$PYTHONPATH
export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true"

# for file in `find /home/weiwu/tools/stanford-corenlp-full-2017-06-09/ -name "*.jar"`; do export
# CLASSPATH="$CLASSPATH:`realpath $file`"; done
# export STANFORD_SEGMENTER_PATH="$HOME/tools/segmenter"
# #export CLASSPATH="$CLASSPATH:$STANFORD_SEGMENTER_PATH/stanford-segmenter.jar"
# export STANFORD_NER_PATH="$HOME/tools/tools/stanford-ner-2017-06-09"
# export CLASSPATH="$CLASSPATH:$STANFORD_NER_PATH/stanford-ner.jar"
#export PATH="$PYENV_ROOT/bin:$PATH"

#pyenv virtualenvwrapper

#export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python

source /usr/local/bin/virtualenvwrapper.sh
export PYENV_ROOT=$HOME/.pyenv
export PATH=$PYENV_ROOT/bin:$PATH
eval "$(pyenv init -)"

#export PATH="$PYENV_ROOT/bin:$PATH
#eval "$(pyenv init -)"
#pyenv virtualenvwrapper

export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python


# The next line updates PATH for the Google Cloud SDK.
if [ -f '/home/weiwu/projects/sentiment/google-cloud-sdk/path.zsh.inc' ]; then source '/home/weiwu/projects/sentiment/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/home/weiwu/projects/sentiment/google-cloud-sdk/completion.zsh.inc' ]; then source '/home/weiwu/projects/sentiment/google-cloud-sdk/completion.zsh.inc'; fi
fpath=(~/.zsh/completion $fpath)
autoload -Uz compinit && compinit -i

#+END_SRC

- history and timestamp:
#+BEGIN_SRC bash
history -E
#+END_SRC
*** make cmake compile
**** cmake
http://derekmolloy.ie/hello-world-introductions-to-cmake/
***** Example 2: A Project with Directories
#+BEGIN_SRC txt
 molloyd@beaglebone:~/exploringBB/extras/cmake/student$ tree
 .
 |-- CMakeLists.txt
 |-- build
 |-- include
 |   \-- Student.h
 \-- src
     |-- Student.cpp
     \-- mainapp.cpp
 3 directories, 4 files
#+END_SRC

#+BEGIN_SRC bash
cd build
cmake ..
make
ls
./test
#+END_SRC
*** update/install git
    yum install http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm

    yum install git

    git --version
- download yum rpm package:
#+BEGIN_SRC bash
yum reinstall -y --downloadonly --downloaddir=/home/wuwei/Downloads/zsh unzip
# or
repotrack unzip
#+END_SRC

- list packages installed:
#+BEGIN_SRC bash
rpm -qa
#+END_SRC


** BOOTING AND SHUTTING DOWN
*** Bootstrapping
*** Booting PCs
*** GRUB: The GRand Unified Boot loader
*** Booting to single-user mode
*** Working with startup scripts
*** Booting Solaris
*** Rebooting and shutting down

** ACCESS CONTROL AND ROOTLY POWERS
*** Traditional UNIX access control
*** Modern access control
*** Real-world access control
*** Pseudo-users other than root

** CONTROLLING PROCESSES
*** Components of a process
*** The life cycle of a process
*** Signals
*** kill: send signals
- kill all matching name:
#+BEGIN_SRC bash
pkill -f process_name
# or
ps aux | grep -ie amarok | awk '{print $2}' | xargs kill -9
#+END_SRC

*** Process states
*** nice and renice: influence scheduling priority
*** ps: monitor processes
*** Dynamic monitoring with top, prstat, and topas
*** The /proc filesystem
*** strace, truss, and tusc: trace signals and system calls
*** Runaway processes
*** Check Memory usage:
#+BEGIN_SRC bash
cat /proc/meminfo # 或者 更直观的查看内存的命令：free -m
free -m
top -H
#+END_SRC
** THE FILESYSTEM
*** Pathnames
- get file's absolute path
#+BEGIN_SRC bash
readlink -f file.txt
#+END_SRC
*** Filesystem mounting and unmounting
*** The organization of the file tree
*** File types
*** File attributes

*** Access control lists
- read certain line from a file:
#+BEGIN_SRC bash
cat 'file' | sed -n '25p'
#+END_SRC
- compress a file:
#+BEGIN_SRC bash
zip -r filename.zip target_dir
tar -cvjSf folder.tar.bz2 folder
#+END_SRC
** ADDING NEW USERS
*** The /etc/passwd file
*** The /etc/shadow and /etc/security/passwd files
*** The /etc/group file
*** Adding users: the basic steps
*** Adding users with useradd

*** Adding users in bulk with newusers (Linux)
*** Removing users
- delete user
#+BEGIN_SRC bash
sudo userdel -r username
#+END_SRC
*** Disabling logins
*** Managing users with system-specific tools
*** Reducing risk with PAM
*** Centralizing account management
*** Grand user prevelige
- add user into a group
#+BEGIN_SRC shell
usermod -aG username groups
#+END_SRC

- remove user from a group
#+BEGIN_SRC shell
usermod -G "" username
#+END_SRC

- check user's group
#+BEGIN_SRC shell
groups username
#+END_SRC

** STORAGE
*** I just want to add a disk!
primary -> (extended(logic))

磁盘的分区大致可以分为三类，分别为主分区、扩展分区和逻辑分区等等。Linux系统管理员在部署系统时，必须要对这三个分区进行一个合理的规划，否则的话会浪费宝贵的硬盘空间。

通常情况下，一个硬盘中最多能够分割四个主分区。因为硬盘中分区表的大小只有64Bytes，而分割一个分区就需要利用16Bytes空间来存储这个分区的相关信息。由于这个分区表大小的限制，硬盘之能够分给为四个主分区。如果此时一块硬盘有120个G，而管理员划分了4个主分区，每个主分区的空间为20个G。那么总共才用去了80G的空间。这块硬盘剩余的40G空间就将无法使用。这显然浪费了硬盘的空间。

为了突破这最多四个主分区的限制，Linux系统引入了扩展分区的概念。即管理员可以把其中一个主分区设置为扩展分区(注意只能够使用一个扩展分区)来进行扩充。而在扩充分区下，又可以建立多个逻辑分区。也就是说，扩展分区是无法直接使用的，必须在细分成逻辑分区才可以用来存储数据。通常情况下，逻辑分区的起始位置及结束位置记录在每个逻辑分区的第一个扇区，这也叫做扩展分区表。在扩展分区下，系统管理员可以根据实际情况建立多个逻辑分区，将一个扩展分区划割成多个区域来使用。
**** add a new disk:
#+BEGIN_SRC bash
fdisk -l
fdisk /dev/hdd
# （选中对新硬盘/dev/hdd进行操作）
Command (m for help): d
1-end

p （p表示新建主分区）
.Command (m for help): w（完成分区规划后不要忘记用w命令保存退出，如果觉得之前的分区工作不合理，千万不要使用w退出，使用q不保存退出便可以重新进行磁盘划分）

mkfs.ext3 /dev/hdd1
(注：需要手动对每个分区进行格式化，不能一次性格式整个硬盘，例如:mkfs.ext3 /dev/sda，否则会格式化失败。)

mount /dev/hdd1 /home/oem/extended(将主分区1挂载到/home/oem/extended目录)
df -h
(查看新硬盘挂载后的信息，确保正确无误)

sudo gedit /etc/fstab
编辑fstab文件
（这点十分重要，一定要记得编辑该文件，不然重启电脑后系统将不会保存之前的挂载操作）
/dev/hdd5            /usr/local/superman    ext3    defaults        1 1

# mount samba on local disk
sudo mount -t cifs -o user=wuwei,password=samba123,uid=1000,gid=1000,iocharset=utf8,rw,dir_mode=0777,file_mode=0777 //192.168.4.36/projects /home/weiwu/sambashare

#+END_SRC
*** Storage hardware
- check disk storage space:
#+BEGIN_SRC bash
# human readable
df -H
sudo fdisk -l
#+END_SRC
- list size of all files and directories:
#+BEGIN_SRC bash
df -sh *
# find file by name and show sizes
find ./ -name '*patient*.pkl' | awk '{print $1}' | xargs du -sh
#+END_SRC

*** Storage hardware interfaces
*** Peeling the onion: the software side of storage
*** Attachment and low-level management of drives
*** Disk partitioning
*** RAID: redundant arrays of inexpensive disks
*** Logical volume management
*** Filesystems
**** give user permission to write a folder
#+BEGIN_SRC bash
# change the user owning this file or directory (folder)
sudo chown username: myfolder
# to add the write permission to the username user
sudo chmod u+w myfolder
#+END_SRC
*** ZFS: all your storage problems solved
*** Storage area networking

** PERIODIC PROCESSES
*** cron: schedule commands
*** The format of crontab files
*** Crontab management
#+BEGIN_SRC bash
0,10,20,30,40,50 * * * * PYTHONPATH=/home/wuwei/projects/ylib/ /home/wuwei/anaconda3/envs/tfgpu/bin/python /home/wuwei/projects/text_data_mining/bitcoin/package/btc_real.py >> ~/cron_btc_real.log 2>&1
#+END_SRC
*** Linux and Vixie-cron extensions
*** Some common uses for cron

** BACKUPS
*** Motherhood and apple pie
*** Backup devices and media
*** Saving space and time with incremental backups
*** Setting up a backup regime with dump
*** Dumping and restoring for upgrades
*** Using other archiving programs
*** Using multiple files on a single tape
*** Bacula
*** Commercial backup products


** SYSLOG AND LOG FILES
*** Finding log files
*** Syslog: the system event logger
*** AIX logging and error handling
*** logrotate: manage log files
*** Condensing log files to useful information
*** Logging policies

** SOFTWARE INSTALLATION AND MANAGEMENT
*** Installing Linux and OpenSolaris
*** Installing Solaris
*** Installing HP-UX
*** Installing AIX with the Network Installation Manager
*** Managing packages
*** Managing Linux packages
*** Using high-level Linux package management systems
*** Managing packages for UNIX
*** Revision control
*** Software localization and configuration
*** Using configuration management tools
*** Sharing software over NFS
1. install packages
NFSv4 client
#+BEGIN_SRC bash
sudo apt-get install nfs-common rpcbind

#+END_SRC
NFSv4 server
#+BEGIN_SRC bash
sudo apt-get install nfs-kernel-server rpcbind
#+END_SRC
2. isolate all NFS exports in single directory, where the real directories will be mounted with the --bind option
#+BEGIN_SRC bash
mkdir -p /export/users
#+END_SRC
or
#+BEGIN_SRC bash
sudo gedit /etc/fstab
/home/users    /export/users   none    bind  0  0
#+END_SRC
3. edit export configuration on server
#+BEGIN_SRC bash
gksu gedit /etc/exports
/home/weiwu/Documents/projects           192.168.1.73(rw,sync,no_root_squash,no_subtree_check)
#+END_SRC
4. restart nfs service
#+BEGIN_SRC bash
sudo service nfs-kernel-server restart
#+END_SRC
5. export all
#+BEGIN_SRC bash
sudo exportfs -a
# verify
sudo exportfs -v
#+END_SRC
6. mount on client
#+BEGIN_SRC bash
sudo mount -t nfs4 -o proto=tcp,port=2049 192.168.1.199:/home/weiwu/Documents/projects /home/oem/projects/share
#+END_SRC
** DRIVERS AND THE KERNEL
*** Kernel adaptation
*** Drivers and device files
*** Linux kernel configuration
*** Solaris kernel configuration
*** HP-UX kernel configuration
*** Management of the AIX kernel
*** Loadable kernel modules
*** Linux udev for fun and profit

** geditor
*** notepad ++
find remotregular expression content in a big file:
#+BEGIN_SRC txt
1. Use the Search-->Find-->Mark functionality to mark each line you want to keep/copy and remember to tick 'Bookmark Line' before marking the text
2. Select Search-->Bookmark-->Remove Unmarked Lines
3. Use Search-->Find-->Replace to replace other text you do not want to keep/copy with nothing
4. Save the remaining text or copy it.

#+END_SRC
*** nano
- 光标控制 移动光标：使用用方向键移动。
- 选择文字：按住鼠标左键拖到。
- 复制、剪贴和粘贴
- 复制一整行：Alt+6
- 剪贴一整行：Ctrl+K
- 粘贴：Ctrl+U 如果需要复制／剪贴多行或者一行中的一部分，先将光标移动到需要复制／剪贴的文本的开头，按Ctrl+6（或者Alt+A）做标记，然后移动光标到 待复制／剪贴的文本末尾。这时选定的文本会反白，用Alt+6来复制，Ctrl+K来剪贴。若在选择文本过程中要取消，只需要再按一次Ctrl+6。
- 搜索 按Ctrl+W，然后输入你要搜索的关键字，回车确定。这将会定位到第一个匹配的文本，接着可以用Alt+W来定位到下一个匹配的文本。
- 翻页 Ctrl+Y到上一页 Ctrl+V到下一页
- 保存 使用Ctrl+O来保存所做的修改.
- 退出 按Ctrl+X 如果你修改了文件，下面会询问你是否需要保存修改。输入Y确认保存，输入N不保存，按Ctrl+C取消返回。如果输入了Y，下一步会让你输入想要保存的文件名。如果不需要修改文件名直接回车就行；若想要保存成别的名字（也就是另存为）则输入新名称然后确 定。这个时候也可用Ctrl+C来取消返回。

| name     | shortcut         |
| 标记     | 	Ctrl+6 / Alt+A |
| 复制整行 | Alt+6            |
| 剪贴整行 | Ctrl+K           |
| 粘贴     | Ctrl+U           |
| 查找     | Ctrl+W (WhereIs) |
| 继续查找 | Alt+W            |
| 上一页   | Ctrl+Y           |
| 下一页   | Ctrl+V           |
| 保存     | 	Ctrl+O         |
| 退出	   | Ctrl+X           |
*** [[file:../../emacs/emacs.org][emacs]]
* NETWORKING
** TCP/IP NETWORKING
*** TCP/IP and its relationship to the Internet
*** Networking road map
*** Packet addressing
*** IP addresses: the gory details
- change dynamic ip to static ip:
#+BEGIN_SRC bash
# Ubuntu 14.04
# interfaces(5) file used by ifup(8) and ifdown(8)
auto lo
iface lo inet loopback

auto eth1
iface eth1 inet static
address 192.168.1.128
netmask 255.255.255.0
network 192.168.1.1
dns-nameservers 8.8.8.8

auto eth0
iface eth0 inet static
address 192.168.1.199
netmask 255.255.255.0
gateway 192.168.1.1
dns-nameservers 8.8.8.8

# Ubuntu 16.04
sudo gedit /etc/network/interfaces
auto eno1
iface eno1 inet static
address 192.168.1.73
netmask 255.255.255.0
gateway 192.168.1.1
dns-nameservers 8.8.8.8
#+END_SRC
- restart network service
sudo ifdown eth0 && sudo ifup eth0
*** Routing
*** ARP: the Address Resolution Protocol
*** DHCP: the Dynamic Host Configuration Protocol
virtualbox 网络添加localhost，virtual machine 网络添加
#+BEGIN_SRC bash
sudo gedit /etc/network/interfaces
# interfaces(5) file used by ifup(8) and ifdown(8)
auto lo
iface lo inet loopback


auto eth0
iface eth0 inet static
address 192.168.1.199
netmask 255.255.255.0
gateway 192.168.1.1
dns-nameservers 8.8.8.8

auto eth1
iface eth1 inet static
address 192.168.1.128
netmask 255.255.255.0
network 192.168.1.1
dns-nameservers 8.8.8.8

sudo ifdown eth0 && sudo ifup eth0
sudo service networking restart
#+END_SRC
*** Security issues
*** PPP: the Point-to-Point Protocol
*** Basic network configuration
*** System-specific network configuration
*** Linux networking
*** Solaris networking
*** HP-UX networking
*** AIX networking


** ROUTING
*** Packet forwarding: a closer look
*** Routing daemons and routing protocols
*** Protocols on parade
*** Routing strategy selection criteria
*** Routing daemons
*** Cisco routers


** NETWORK HARDWARE
*** Ethernet: the Swiss Army knife of networking
*** Wireless: ethernet for nomads
*** DSL and cable modems: the last mile
*** Network testing and debugging
*** Building wiring
*** Network design issues
*** Management issues
*** Recommended vendors


** DNS: THE DOMAIN NAME SYSTEM
*** Who needs DNS?
*** How DNS works
*** DNS for the impatient
*** Name servers
*** The DNS namespace
*** Designing your DNS environment
*** What’s new in DNS
*** The DNS database
*** The BIND software
*** BIND configuration examples
*** The NSD/Unbound software
*** Updating zone files
*** Security issues
*** Microsoft and DNS
*** Testing and debugging
*** Vendor specifics


** THE NETWORK FILE SYSTEM
*** Introduction to network file services
*** The NFS approach
*** Server-side NFS
*** Client-side NFS
*** Identity mapping for NFS version 4
*** nfsstat: dump NFS statistics
*** Dedicated NFS file servers
*** Automatic mounting
#+BEGIN_SRC bash
# mount a windows shared folder
sudo mount -t cifs -o username="gft" //192.168.1.126/share ~/share

#+END_SRC

** SHARING SYSTEM FILES
*** What to share
*** Copying files around
*** LDAP: the Lightweight Directory Access Protocol
*** NIS: the Network Information Service
*** Prioritizing sources of administrative information


** ELECTRONIC MAIL
*** Mail systems
*** The anatomy of a mail message
*** The SMTP protocol
*** Mail system design
*** Mail aliases
*** Content scanning: spam and malware
*** Email configuration
*** sendmail
*** sendmail configuration
*** sendmail configuration primitives
*** Security and sendmail
*** sendmail performance
*** sendmail testing and debugging
*** Exim
*** Postfix
*** DKIM Configuration
*** Integrated email solutions


** NETWORK MANAGEMENT AND DEBUGGING
*** Network troubleshooting
*** ping: check to see if a host is alive
*** SmokePing: gather ping statistics over time
*** traceroute: trace IP packets
*** netstat: get network statistics
- check port availability:
#+BEGIN_SRC bash
netstat -na -f inet | grep LISTEN
lsof -i -P -n | grep LISTEN
ps aux | grep 8899
# example netstat -na -f inet | grep 5277
# for windows
netstat -aon | findstr "8080"
#+END_SRC
*** Inspection of live interface activity
*** Packet sniffers
*** The ICSI Netalyzr
*** Network management protocols
*** SNMP: the Simple Network Management Protocol
*** The NET-SNMP agent
*** Network management applications
*** NetFlow: connection-oriented monitoring
- monitor ping from others
#+BEGIN_SRC bash
tcpdump ip proto \\icmp
#+END_SRC


** SECURITY
*** Is UNIX secure?
*** How security is compromised
*** Security tips and philosophy
*** Passwords and user accounts
*** PAM: cooking spray or authentication wonder?
*** Setuid programs
*** Effective use of chroot
*** Security power tools
*** Mandatory Access Control (MAC)
*** Cryptographic security tools
*** Firewalls
#+BEGIN_SRC bash
# status
systemctl list-unit-files|grep firewalld.service
# or
systemctl status firewalld.service

systemctl stop firewalld.service #停止firewall
systemctl disable firewalld.service #禁止firewall开机启动

systemctl start firewalld.service # 启动一个服务：
systemctl stop firewalld.service # 关闭一个服务：
systemctl restart firewalld.service # 重启一个服务
systemctl status firewalld.service # 显示一个服务的状态：
systemctl enable firewalld.service # 在开机时启用一个服务：
systemctl disable firewalld.service # 在开机时禁用一个服务：
systemctl is-enabled firewalld.service;echo $?   # 查看服务是否开机启动：
systemctl list-unit-files|grep enabled # 查看已启动的服务列表：

firewall-cmd --list-ports # 查看已经开放的端口：
firewall-cmd --zone=public --add-port=80/tcp --permanent  # 开启端口

firewall-cmd --reload #重启firewall

#+END_SRC
*** Linux firewall features
*** IPFilter for UNIX systems
*** Virtual private networks (VPNs)
*** Certifications and standards
*** Sources of security information
*** What to do when your site has been attacked


** WEB HOSTING
*** Web hosting basics
*** HTTP server installation
*** Virtual interfaces
*** The Secure Sockets Layer (SSL)
*** Caching
*** chrome cookies
1. view source code from a webpage.

2. goto console

3. type document.cookie
* BUNCH O' STUFF
** VIRTUALIZATION
*** Virtual vernacular
**** screen
Screen or GNU Screen, is a terminal multiplexer. In other words, it means that you can start a screen session and then open any number of windows(virtual terminals) inside that session. Processes running in Screen will continue to run when their window is not visible even if you get disconnected.
***** installation
#+BEGIN_SRC bash
yum install screen
# or
sudo apt-get install screen
#+END_SRC
***** start a linux screen
#+BEGIN_SRC bash
screen -S session_name
Ctrl+a c # Create a new window (with shell)
Ctrl+a Ctrl+a # Toggle between current and previous region

#+END_SRC
***** Detach from Linux Screen Session
Ctrl+a d
***** Reattach to a Linux Screen
#+BEGIN_SRC bash
screen -ls
screen -r session

#+END_SRC
*** Benefits of virtualization
*** A practical approach
*** Virtualization with Linux
*** Solaris zones and containers
*** AIX workload partitions
*** Integrity Virtual Machines in HP-UX
*** VMware: an operating system in its own right
*** Amazon Web Services


** THE X WINDOW SYSTEM
*** The display manager
*** Process for running an X application
*** X server configuration
*** X server troubleshooting and debugging
*** A brief note on desktop environments


** PRINTING
*** Printing-system architecture
*** CUPS printing
*** Printing from desktop environments
*** System V printing
*** BSD and AIX printing
*** What a long, strange trip it’s
*** Common printing software
*** Printer languages
*** PPD files
*** Paper sizes
*** Printer practicalities
*** Troubleshooting tips


** DATA CENTER BASICS
*** Data center reliability tiers
*** Cooling
*** Power
*** Racks
*** Tools


** GREEN IT
*** Green IT initiation
*** The green IT eco-pyramid
*** Green IT strategies: data center
*** Green IT strategies: user workspace
*** Green IT friends

** PERFORMANCE ANALYSIS
*** What you can do to improve performance
*** Factors that affect performance
*** How to analyze performance problems
*** System performance checkup
*** Help! My system just got really slow!


** COOPERATING WITH WINDOWS
*** Logging in to a UNIX system from Windows
*** Accessing remote desktops
- VNC
#+BEGIN_SRC bash
sudo apt-get install vinagre -y
#+END_SRC
*** Running Windows and Windows-like applications
*** Using command-line tools with Windows
*** Windows compliance with email and web standards
*** Sharing files with Samba and CIFS

- mount with sambaclient:
#+BEGIN_SRC bash
# add domain for windows
sudo mount -t cifs -o user=wuwei,password=samba123,uid=1000,gid=1000,iocharset=utf8,rw,dir_mode=0777,file_mode=0777 //192.168.4.36/projects /home/weiwu/sambashare
mount -t cifs -o username=tech-winning/wuwei,password= //192.168.16.71/CloudStation ./windows

smbclient --user=DEV-WUWEI //192.168.16.71/CloudStation
#+END_SRC

- samba file, :
#+BEGIN_SRC bash
(tfgpu) ➜  bijie_groups_API git:(master) ✗ less /etc/samba/smb.conf
[global]
        workgroup = WORKGROUP
        security = user

        passdb backend = tdbsam

        printing = cups
        printcap name = cups
        load printers = yes
        cups options = raw

[homes]
        comment = Home Directories
        valid users = %S, %D%w%S
        browseable = No
        read only = No
        inherit acls = Yes

[printers]
        comment = All Printers
        path = /var/tmp
        printable = Yes
        create mask = 0600
        browseable = No

[print$]
        comment = Printer Drivers
        path = /var/lib/samba/drivers
        write list = @printadmin root
        force group = @printadmin
        create mask = 0664
        directory mask = 0775

[projects]
        path = /home/wuwei/projects
        valid users = wuwei
        writeable = yes
        browseable = yes
        read only = no

(tfgpu) ➜  bijie_groups_API git:(master) ✗ smbclient -L //localhost/
#+END_SRC

*** Sharing printers with Samba
*** Debugging Samba
*** Active Directory authentication


** SERIAL DEVICES AND TERMINALS
*** The RS-232C standard
*** Alternative connectors
*** Hard and soft carrier
*** Hardware flow control
*** Serial device files
*** setserial: set serial port parameters under Linux
*** Pseudo-terminals
*** Configuration of terminals
*** Special characters and the terminal driver
*** stty: set terminal options
*** tset: set options automatically
*** Terminal unwedging
*** Debugging a serial line
*** Connecting to serial device consoles
** Docker
*** start a docker
#+BEGIN_SRC bash
service docker start
#+END_SRC
*** manage a docker image
*** go inside a docker
#+BEGIN_SRC bash
docker exec -it container的ID /bin/bash
#+END_SRC
*** redash
**** internal server error
     #+BEGING_SRC bash
     docker-compose run --rm server create_db
     #+END_SRC
