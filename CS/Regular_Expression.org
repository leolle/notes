#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline author:t c:nil
#+OPTIONS: creator:nil d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t
#+TITLES: Regular_Expression
#+DATE: <2017-06-23 Fri>
#+AUTHORS: weiwu
#+EMAIL: victor.wuv@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 8.3.4)
#+SETUPFILE: ../configOrg/level1.org

* Finding Patterns in Text
The most common use for re is to search for patterns in text. This example looks for two literal strings, 'this' and 'that', in a text string.
#+BEGIN_SRC python
#!/home/weiwu/.pyenv/shims/python2
import re

patterns = [ 'this', 'that' ]
text = 'Does this text match the pattern?'

for pattern in patterns:
    print 'Looking for "%s" in "%s" ->' % (pattern, text)

    if re.search(pattern,  text):
        print 'found a match!'
    else:
        print 'no match'
#+END_SRC

*search()* takes the pattern and text to scan, and returns a *Match* object when the pattern is found. If the pattern is not found, search() returns None.

The Match object returned by search() holds information about the nature of the match, including the original input string, the regular expression used, and the location within the original string where the pattern occurs.
#+BEGIN_SRC python
import re

pattern = 'this'
text = 'Does this text match the pattern?'

match = re.search(pattern, text)

s = match.start()
e = match.end()

print 'Found "%s" in "%s" from %d to %d ("%s")' % \
    (match.re.pattern, match.string, s, e, text[s:e])
#+END_SRC

* Compiling Expressions
The compile() function converts an expression string into a RegexObject.
#+BEGIN_SRC python
import re

# Pre-compile the patterns
regexes = [ re.compile(p) for p in [ 'this',
                                     'that',
                                     ]
            ]
text = 'Does this text match the pattern?'

for regex in regexes:
    print 'Looking for "%s" in "%s" ->' % (regex.pattern, text),

    if regex.search(text):
        print 'found a match!'
    else:
        print 'no match'
#+END_SRC
* Multiple Matches

So far the example patterns have all used search() to look for single instances of literal text strings.
** The findall() function returns all of the substrings of the input that match the pattern without overlapping.

#+BEGIN_SRC python
import re

text = 'abbaaabbbbaaaaa'

pattern = 'ab'

for match in re.findall(pattern, text):
    print 'Found "%s"' % match

#+END_SRC
There are two instances of ab in the input string.

#+BEGIN_SRC bash
python re_findall.py

Found "ab"
Found "ab"

#+END_SRC
** finditer() returns an iterator that produces Match instances instead of the strings returned by findall().

#+BEGIN_SRC python
import re

text = 'abbaaabbbbaaaaa'

pattern = 'ab'

for match in re.finditer(pattern, text):
    s = match.start()
    e = match.end()
    print 'Found "%s" at %d:%d' % (text[s:e], s, e)

#+END_SRC
This example finds the same two occurrences of ab, and the Match instance shows where they are in the original input.
* Character Sets
A character set is a group of characters, any one of which can match at that point in the pattern. For example, [ab] would match either a or b.
#+BEGIN_SRC python
from re_test_patterns import test_patterns

test_patterns('abbaaabbbbaaaaa',
              [ '[ab]',    # either a or b
                'a[ab]+',  # a followed by one or more a or b
                'a[ab]+?', # a followed by one or more a or b, not greedy
                ])


test_patterns('This is some text -- with punctuation.',
              [ '[^-. ]+',  # sequences without -, ., or space
                ])
#+END_SRC

* Repetition

** *.
 * doesn’t match the literal character *; instead, it specifies that the previous character can be matched zero or more times, instead of exactly once.
For example, ca*t will match ct (0 a characters), cat (1 a), caaat (3 a characters), and so forth.
#+BEGIN_SRC python
from re_test_patterns import test_patterns

test_patterns('abbaaabbbbaaaaa',
              [ 'ab*',     # a followed by zero or more b
                'ab+',     # a followed by one or more b
                'ab?',     # a followed by zero or one b
                'ab{3}',   # a followed by three b
                'ab{2,3}', # a followed by two to three b
                ])
#+END_SRC

* Matching characters

** metacharacters

*** Anchors
#+begin_src emacs-lisp :tangle yes
. ^ $ * + ? { } [ ] \ | ( )
#+end_src
- The first metacharacters we’ll look at are [ and ]. They’re used for specifying a character class, which is a set of characters that you wish to match. Characters can be listed individually, or a range of characters can be indicated by giving two characters and separating them by a '-'. For example, [abc] will match any of the characters a, b, or c; this is the same as [a-c], which uses a range to express the same set of characters. If you wanted to match only lowercase letters, your RE would be [a-z].
#+begin_src emacs-lisp :tangle yes
^
#+end_src
The match must occur at the beginning of the *line*.
#+begin_src emacs-lisp :tangle yes
$
#+end_src
The match must occur at the end of the *line*.
#+begin_src emacs-lisp :tangle yes
\<
#+end_src
The match must occur at the beginning of the *string*.
#+begin_src emacs-lisp :tangle yes
\>
#+end_src
The match must occur at the end of the string.
#+begin_src emacs-lisp :tangle yes
\b
#+end_src
Defines the boundary for the word.

*** Common Tokens, Pattern Matching
- ?
indicates zero or one occurrences of the preceding element.
- *
indicates zero or more occurrences of the preceding element.
- +
indicates one or more occurrences of the preceding element.

- You can match the characters not listed within the class by complementing the set.
 This is indicated by including a '^' as the first character of the class; '^' outside a character class will simply match the '^' character. For example, [^5] will match any character except '5'.
- \.
As in Python string literals, the backslash can be followed by various characters to signal various special sequences. It’s also used to escape all the metacharacters so you can still match them in patterns; for example, if you need to match a [ or \, you can precede them with a backslash to remove their special meaning: \[ or \\.
- \d
Matches any decimal digit; this is equivalent to the class [0-9].
- \D
Matches any non-digit character; this is equivalent to the class [^0-9].
- \s
Matches any whitespace character; this is equivalent to the class [ \t\n\r\f\v].
- \S
Matches any non-whitespace character; this is equivalent to the class [^ \t\n\r\f\v].
- \w
Matches any alphanumeric character; this is equivalent to the class [a-zA-Z0-9_].
- \W
Matches any non-alphanumeric character; this is equivalent to the class [^a-zA-Z0-9_].
- \(
open braket
- [\u4e00-\u9fa5]+
汉字

*** Quantification

- *
The asterisk indicates zero or more occurrences of the preceding element.
0 or more
- +
indicates one or more occurrences of the preceding element.
1 or more
- ?
0 or 1
- {m,n}
Used to match between m and n occurences of the previous character. The example tries to match between three and five w's.

** cases examples:
- string between brackets:
#+BEGIN_SRC python
pattern = re.compile('\(([^)]+)\)')
data = json.loads(pattern.findall(html)[0])
#+END_SRC

- url:
https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)

- date:
01 Jan 2003
^\d{2}\s{1}(Jan|Feb|Mar|Apr|May|Jun|Jul|Apr|Sep|Oct|Nov|Dec)\s{1}\d{4}$

Jan 31, 2018
(Jan|Feb|Mar|Apr|May|Jun|Jul|Apr|Sep|Oct|Nov|Dec)\s\d{1,2},\s\d{4}

- time:
(\d{4}\/\d{1,2}\/\d{1,2}\s\d{1,2}:\d{1,2}:\d{1,2})

- machine space and numbers:
\s\b\d+\b

- content to strings
#+BEGIN_SRC txt
SECTION\s\w+: -> *
(\t){1}CHAPTER(\s)[\d]{1,} -> **
(\t){1}[\d]{1,} ->

(\t){2} -> **
(\t){1} -> *
#+END_SRC

- Chinese:
[\u4e00-\u9fa5]

- Chinese punctuation:
[\u3002\uff1b\uff0c\uff1a\u201c\u201d\uff08\uff09\u3001\uff1f\u300a\u300b]

- English punctuation:
[!#$%&'()*+,-./:;<=>?@[\]^_`{|}~]
* replace content to org mode strings

* Linux
- grep: Invalid range end
This is because you are using the hyphen within other characters, so that grep understands it as a range, which happens to be invalid.

You are basically doing
#+BEGIN_SRC bash
grep "[\-']" file

#+END_SRC
